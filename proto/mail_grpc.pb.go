// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailingServiceClient is the client API for MailingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingServiceClient interface {
	InsertEmail(ctx context.Context, in *InsertEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	GetEmailBatch(ctx context.Context, in *GetEmailBatchRequest, opts ...grpc.CallOption) (*GetEmailBatchResponse, error)
}

type mailingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingServiceClient(cc grpc.ClientConnInterface) MailingServiceClient {
	return &mailingServiceClient{cc}
}

func (c *mailingServiceClient) InsertEmail(ctx context.Context, in *InsertEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailing_service/InsertEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailing_service/GetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailing_service/DeleteEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, "/proto.mailing_service/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) GetEmailBatch(ctx context.Context, in *GetEmailBatchRequest, opts ...grpc.CallOption) (*GetEmailBatchResponse, error) {
	out := new(GetEmailBatchResponse)
	err := c.cc.Invoke(ctx, "/proto.mailing_service/GetEmailBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingServiceServer is the server API for MailingService service.
// All implementations must embed UnimplementedMailingServiceServer
// for forward compatibility
type MailingServiceServer interface {
	InsertEmail(context.Context, *InsertEmailRequest) (*GetEmailResponse, error)
	GetEmail(context.Context, *GetEmailRequest) (*GetEmailResponse, error)
	DeleteEmail(context.Context, *DeleteEmailRequest) (*GetEmailResponse, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*GetEmailResponse, error)
	GetEmailBatch(context.Context, *GetEmailBatchRequest) (*GetEmailBatchResponse, error)
	mustEmbedUnimplementedMailingServiceServer()
}

// UnimplementedMailingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailingServiceServer struct {
}

func (UnimplementedMailingServiceServer) InsertEmail(context.Context, *InsertEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEmail not implemented")
}
func (UnimplementedMailingServiceServer) GetEmail(context.Context, *GetEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmail not implemented")
}
func (UnimplementedMailingServiceServer) DeleteEmail(context.Context, *DeleteEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedMailingServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedMailingServiceServer) GetEmailBatch(context.Context, *GetEmailBatchRequest) (*GetEmailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailBatch not implemented")
}
func (UnimplementedMailingServiceServer) mustEmbedUnimplementedMailingServiceServer() {}

// UnsafeMailingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingServiceServer will
// result in compilation errors.
type UnsafeMailingServiceServer interface {
	mustEmbedUnimplementedMailingServiceServer()
}

func RegisterMailingServiceServer(s grpc.ServiceRegistrar, srv MailingServiceServer) {
	s.RegisterService(&MailingService_ServiceDesc, srv)
}

func _MailingService_InsertEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).InsertEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailing_service/InsertEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).InsertEmail(ctx, req.(*InsertEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailing_service/GetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetEmail(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailing_service/DeleteEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailing_service/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_GetEmailBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).GetEmailBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.mailing_service/GetEmailBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).GetEmailBatch(ctx, req.(*GetEmailBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingService_ServiceDesc is the grpc.ServiceDesc for MailingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mailing_service",
	HandlerType: (*MailingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertEmail",
			Handler:    _MailingService_InsertEmail_Handler,
		},
		{
			MethodName: "GetEmail",
			Handler:    _MailingService_GetEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _MailingService_DeleteEmail_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _MailingService_UpdateEmail_Handler,
		},
		{
			MethodName: "GetEmailBatch",
			Handler:    _MailingService_GetEmailBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail.proto",
}
